// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/storage.go

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/sonyamoonglade/delivery-service/internal/delivery/transport/dto"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Complete mocks base method.
func (m *MockStorage) Complete(deliveryID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", deliveryID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete.
func (mr *MockStorageMockRecorder) Complete(deliveryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockStorage)(nil).Complete), deliveryID)
}

// Create mocks base method.
func (m *MockStorage) Create(d dto.CreateDeliveryDatabaseDto) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", d)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), d)
}

// Delete mocks base method.
func (m *MockStorage) Delete(id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), id)
}

// Reserve mocks base method.
func (m *MockStorage) Reserve(dto dto.ReserveDeliveryDto) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", dto)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reserve indicates an expected call of Reserve.
func (mr *MockStorageMockRecorder) Reserve(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockStorage)(nil).Reserve), dto)
}

// Status mocks base method.
func (m *MockStorage) Status(ids []int64) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ids)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockStorageMockRecorder) Status(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockStorage)(nil).Status), ids)
}
