// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cli/cli.go

// Package mock_cli is a generated GoMock package.
package mock_cli

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/sonyamoonglade/delivery-service/internal/delivery/transport/dto"
)

// MockCli is a mock of Cli interface.
type MockCli struct {
	ctrl     *gomock.Controller
	recorder *MockCliMockRecorder
}

// MockCliMockRecorder is the mock recorder for MockCli.
type MockCliMockRecorder struct {
	mock *MockCli
}

// NewMockCli creates a new mock instance.
func NewMockCli(ctrl *gomock.Controller) *MockCli {
	mock := &MockCli{ctrl: ctrl}
	mock.recorder = &MockCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCli) EXPECT() *MockCliMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockCli) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCliMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCli)(nil).Ping))
}

// WriteCheck mocks base method.
func (m *MockCli) WriteCheck(dto dto.CheckDtoForCli) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCheck", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCheck indicates an expected call of WriteCheck.
func (mr *MockCliMockRecorder) WriteCheck(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCheck", reflect.TypeOf((*MockCli)(nil).WriteCheck), dto)
}
