// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/check/check.go

// Package mock_check is a generated GoMock package.
package mock_check

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/sonyamoonglade/delivery-service/internal/delivery/transport/dto"
	document "github.com/unidoc/unioffice/document"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockService) Copy(w http.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockServiceMockRecorder) Copy(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockService)(nil).Copy), w)
}

// Format mocks base method.
func (m *MockService) Format(doc *document.Document, dto dto.CheckDto) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Format", doc, dto)
}

// Format indicates an expected call of Format.
func (mr *MockServiceMockRecorder) Format(doc, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockService)(nil).Format), doc, dto)
}

// GetFirstKey mocks base method.
func (m *MockService) GetFirstKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstKey indicates an expected call of GetFirstKey.
func (mr *MockServiceMockRecorder) GetFirstKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstKey", reflect.TypeOf((*MockService)(nil).GetFirstKey))
}

// OpenTemplate mocks base method.
func (m *MockService) OpenTemplate(path string) (*document.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTemplate", path)
	ret0, _ := ret[0].(*document.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenTemplate indicates an expected call of OpenTemplate.
func (mr *MockServiceMockRecorder) OpenTemplate(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTemplate", reflect.TypeOf((*MockService)(nil).OpenTemplate), path)
}

// RestoreKey mocks base method.
func (m *MockService) RestoreKey() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreKey")
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreKey indicates an expected call of RestoreKey.
func (mr *MockServiceMockRecorder) RestoreKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreKey", reflect.TypeOf((*MockService)(nil).RestoreKey))
}

// SetLicense mocks base method.
func (m *MockService) SetLicense(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLicense", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLicense indicates an expected call of SetLicense.
func (mr *MockServiceMockRecorder) SetLicense(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLicense", reflect.TypeOf((*MockService)(nil).SetLicense), key)
}
